
; >-------------------------------------------------------------<

.Decode_VFP_S_Destination_Register
   MOV      R0,#'S'
   B        Decode_VFP_x_Destination_Register

; >-------------------------------------------------------------<

.Decode_VFP_D_Destination_Register
   MOV      R0,#'D'
   B        Decode_VFP_x_Destination_Register

; >-------------------------------------------------------------<

.Decode_VFP_Q_Destination_Register
   MOV      R0,#'Q'
   B        Decode_VFP_x_Destination_Register

; >-------------------------------------------------------------<

.Decode_VFP_x_Destination_Register     ;_R0 = Register type ("S", "D" or "Q")
   STMFD    R13!,{R4,R14}
   MOV      R4,R0
   BL       Decode_VFP_Destination_Register
   CMP      R1,R4
   BNE      DT_Illegal_Register
   LDMFD    R13!,{R4,R15}

; >-------------------------------------------------------------<

.Decode_VFP_Destination_Register       ;_R8 = First char or Blank, ~R0 = Register, ~R8 = Next char
   STMFD    R13!,{R14}
   BL       Ensure_Blank
   BL       Decode_VFP_Register
   ORR      R9,R9,R2,LSL #Rd_Pos
   ORR      R9,R9,R3,LSL #VFP_D_Pos
   LDMFD    R13!,{R15}

; >-------------------------------------------------------------<

.Decode_VFP_S_Operand_One
   MOV      R0,#'S'
   B        Decode_VFP_x_Operand_One

; >-------------------------------------------------------------<

.Decode_VFP_D_Operand_One
   MOV      R0,#'D'
   B        Decode_VFP_x_Operand_One

; >-------------------------------------------------------------<

.Decode_VFP_Q_Operand_One
   MOV      R0,#'Q'
   B        Decode_VFP_x_Operand_One

; >-------------------------------------------------------------<

.Decode_VFP_x_Operand_One              ;_R0 = Register type ("S", "D" or "Q")
   STMFD    R13!,{R4,R14}
   MOV      R4,R0
   BL       Decode_VFP_Operand_One
   CMP      R1,R4
   BNE      DT_Illegal_Register
   LDMFD    R13!,{R4,R15}

; >-------------------------------------------------------------<

.Decode_VFP_Operand_One                ;_R8 = "," or Blank, ~R0 = Register, ~R8 = Next char
   STMFD    R13!,{R14}
   BL       Ensure_Comma
   BL       Decode_VFP_Register
   ORR      R9,R9,R2,LSL #Rn_Pos
   ORR      R9,R9,R3,LSL #VFP_N_Pos
   LDMFD    R13!,{R15}

; >-------------------------------------------------------------<

.Decode_VFP_S_Operand_Two
   MOV      R0,#'S'
   B        Decode_VFP_x_Operand_Two

; >-------------------------------------------------------------<

.Decode_VFP_D_Operand_Two
   MOV      R0,#'D'
   B        Decode_VFP_x_Operand_Two

; >-------------------------------------------------------------<

.Decode_VFP_Q_Operand_Two
   MOV      R0,#'Q'
   B        Decode_VFP_x_Operand_Two

; >-------------------------------------------------------------<

.Decode_VFP_x_Operand_Two              ;_R0 = Register type ("S", "D" or "Q")
   STMFD    R13!,{R4,R14}
   MOV      R4,R0
   BL       Decode_VFP_Operand_Two
   CMP      R1,R4
   BNE      DT_Illegal_Register
   LDMFD    R13!,{R4,R15}

; >-------------------------------------------------------------<

.Decode_VFP_Operand_Two                ;_R8 = "," or Blank, ~R0 = Register, ~R8 = Next char
   STMFD    R13!,{R14}
   BL       Ensure_Comma
   BL       Decode_VFP_Register
   ORR      R9,R9,R2,LSL #Rm_Pos
   ORR      R9,R9,R3,LSL #VFP_M_Pos
   LDMFD    R13!,{R15}

; >-------------------------------------------------------------<

.Decode_VFP_Operand_Type               ;_R8 = First char
   MOV      R0,#VFP_Operand_Unknown    ;~R0 = Size (VFP_Operand_8, VFP_Operand_16, VFP_Operand_32 or VFP_Operand_64)
   MOV      R1,#VFP_Operand_Unknown    ;~R1 = Type (VFP_Operand_Unknown, VFP_operand_Int, VFP_Operand_FP or VFP_Operand_Polynomial)
   MOV      R2,#VFP_Operand_Unknown    ;~R2 = Signed (VFP_Operand_Unknown, VFP_Operand_Unsigned, VFP_Operand_Signed)
   CMP      R8,#'.'                    ;~R8 = Next char
   MOVNE    R15,R14
   LDRB     R8,[R10],#1
   CMP      R8,#'I'
   CMPNE    R8,#'i'
   MOVEQ    R1,#VFP_Operand_Int
   LDREQB   R8,[R10],#1
   BEQ      DVOT_Decode_Size
   CMP      R8,#'S'
   CMPNE    R8,#'s'
   MOVEQ    R1,#VFP_Operand_Int
   MOVEQ    R2,#VFP_Operand_Signed
   LDREQB   R8,[R10],#1
   BEQ      DVOT_Decode_Size
   CMP      R8,#'U'
   CMPNE    R8,#'u'
   MOVEQ    R1,#VFP_Operand_Int
   MOVEQ    R2,#VFP_Operand_Unsigned
   LDREQB   R8,[R10],#1
   BEQ      DVOT_Decode_Size
   CMP      R8,#'F'
   CMPNE    R8,#'f'
   MOVEQ    R1,#VFP_Operand_FP
   LDREQB   R8,[R10],#1
   BEQ      DVOT_Decode_Size
   CMP      R8,#'P'
   CMPNE    R8,#'p'
   MOVEQ    R1,#VFP_Operand_Polynomial
   LDREQB   R8,[R10],#1
   BEQ      DVOT_Decode_Size
   CMP      R8,#'D'
   CMPNE    R8,#'d'
   MOVEQ    R1,#VFP_Operand_FP
   MOVEQ    R0,#VFP_Operand_64
   BEQ      DVOT_End

.DVOT_Decode_Size
   CMP      R8,#'8'
   MOVEQ    R0,#VFP_Operand_8
   BEQ      DVOT_End
   CMP      R8,#'1'
   BEQ      DVOT_16
   CMP      R8,#'3'
   BEQ      DVOT_32
   CMP      R8,#'6'
   BEQ      DVOT_64
   CMP      R1,#VFP_Operand_FP
   MOVEQ    R0,#VFP_Operand_32
   BEQ      DVOT_End

.DVOT_16                               ; R8 = "1"
   LDRB     R8,[R10],#1
   CMP      R8,#'6'
   BNE      DVOT_Error
   MOV      R0,#VFP_Operand_16
   B        DVOT_End

.DVOT_32                               ; R8 = "3"
   LDRB     R8,[R10],#1
   CMP      R8,#'2'
   BNE      DVOT_Error
   MOV      R0,#VFP_Operand_32
   B        DVOT_End

.DVOT_64                               ; R8 = "6"
   LDRB     R8,[R10],#1
   CMP      R8,#'4'
   BNE      DVOT_Error
   MOV      R0,#VFP_Operand_64

.DVOT_End
   CMP      R1,#VFP_Operand_FP
   CMPEQ    R0,#VFP_Operand_8
   BEQ      DVOT_Error
   CMP      R1,#VFP_Operand_Polynomial
   CMPEQ    R0,#VFP_Operand_32
   BEQ      DVOT_Error
   CMP      R1,#VFP_Operand_Polynomial
   CMPEQ    R0,#VFP_Operand_64
   BEQ      DVOT_Error
   LDRB     R8,[R10],#1
   MOV      R15,R14

.DVOT_Error
   MOV      R0,#&0E                    ; Asm_Error #&0E = Illegal VFP operand type
   B        Asm_Error

; >-------------------------------------------------------------<

.Decode_SIMD_Immediate                 ;_R0 = Size (VFP_Operand_8, VFP_Operand_16 or VFP_Operand_32)
   STMFD    R13!,{R4,R5,R14}           ;_R1 = 0 - Not invert constant, 1 - Invert constant
   MOV      R4,R0                      ;_R8 = First char
   MOV      R5,R1                      ;~R8 = Next char
   BL       Decode_Int_Expr
   CMP      R4,#VFP_Operand_8
   BEQ      DSIMDI_8
   CMP      R4,#VFP_Operand_16
   BEQ      DSIMDI_16
   CMP      R4,#VFP_Operand_32
   BEQ      DSIMDI_32
   B        DT_Illegal_Immediate_Value

.DSIMDI_8                              ; cmode = %1110
   BICS     R1,R0,#&FF
   ORREQ    R9,R9,#%1110 << SIMD_Cmode_Pos
   BEQ      DSIMDI_End
   B        DT_Illegal_Immediate_Value

.DSIMDI_16                             ; cmode = %1000 or %1010
   BICS     R1,R0,#&FF
   ORREQ    R9,R9,#%1000 << SIMD_Cmode_Pos
   BEQ      DSIMDI_End
   BICS     R1,R0,#&FF00
   ORREQ    R9,R9,#%1010 << SIMD_Cmode_Pos
   MOVEQ    R0,R0,LSR #8
   BEQ      DSIMDI_End
   B        DT_Illegal_Immediate_Value

.DSIMDI_32                             ; cmode = %000x, %001x, %010x or %011x
   BICS     R1,R0,#&FF
   BEQ      DSIMDI_End
   BICS     R1,R0,#&FF00
   ORREQ    R9,R9,#%0010 << SIMD_Cmode_Pos
   MOVEQ    R0,R0,LSR #8
   BEQ      DSIMDI_End
   BICS     R1,R0,#&FF0000
   ORREQ    R9,R9,#%0100 << SIMD_Cmode_Pos
   MOVEQ    R0,R0,LSR #16
   BEQ      DSIMDI_End
   BICS     R1,R0,#&FF000000
   ORREQ    R9,R9,#%0110 << SIMD_Cmode_Pos
   MOVEQ    R0,R0,LSR #24
   BEQ      DSIMDI_End
   B        DT_Illegal_Immediate_Value

.DSIMDI_End
   CMP      R5,#1
   MVNEQ    R0,R0
   ANDEQ    R0,R0,#&FF
   MOV      R1,R0,LSR #7
   ORR      R9,R9,R1,LSL #24
   MOV      R1,R0,LSR #4
   AND      R1,R1,#%111
   ORR      R9,R9,R1,LSL #16
   AND      R1,R0,#%1111
   ORR      R9,R9,R1
   LDMFD    R13!,{R4,R5,R15}

; >-------------------------------------------------------------<

.Decode_VFP_Shift_Immediate            ;_R0 = Size
   STMFD    R13!,{R4,R5,R14}           ;_R1 = Shift type (0 = Left, 1 = Right)
   MOV      R4,R0                      ;_R8 = First char
   MOV      R5,R1                      ;~R8 = Next char
   BL       Decode_Int_Expr
   MOV      R1,#8
   MOV      R1,R1,LSL R4
   CMP      R0,R1
   MOVHS    R0,#&01                    ; Asm_Error #&01 = Illegal shift
   BHS      Asm_Error
   ORR      R9,R9,R1,LSL #16
   CMP      R5,#0                      ; Left shift?
   ADDEQ    R0,R0,R1
   MOVNE    R1,R1,LSL #1
   SUBNE    R0,R1,R0
   ORR      R9,R9,R0,LSL #16
   CMP      R4,#VFP_Operand_64
   ORREQ    R9,R9,#1 << 7
   LDMFD    R13!,{R4,R5,R15}
