
; >-------------------------------------------------------------<

.DT_FLD                                ;_R8 = "D"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'S'
   CMPNE    R8,#'D'
   MOVEQ    R9,#Load_Bit
   BEQ      DT_FLD_FST
   CMP      R8,#'M'
   MOVEQ    R9,#Load_Bit
   BEQ      DT_FLDM_FSTM
   B        DT_Unknown

; >-------------------------------------------------------------<

.DT_FST                                ;_R8 = "T"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'S'
   CMPNE    R8,#'D'
   MOVEQ    R9,#0
   BEQ      DT_FLD_FST
   CMP      R8,#'M'
   MOVEQ    R9,#0
   BEQ      DT_FLDM_FSTM
   B        DT_Unknown

; >-------------------------------------------------------------<

.DT_FLD_FST                            ;_R8 = "S"/"D"
   BL       Decode_VFP_Register_Type
   BL       Decode_ConditionCode
   BL       Decode_VFP_Destination_Register
   BL       Ensure_Correct_VFP_Register_Type
   B        DT_FLD_FST_VLDR_VSTR

; >-------------------------------------------------------------<

.DT_FLDM_FSTM                          ;_R8 = "M"
   LDRB     R8,[R10],#1
   BL       Decode_Load_Store_Multiple_Addressing_Mode
   BL       Decode_VFP_Register_Type
   B        DT_FLDM_FSTM_VLDM_VSTM

; >-------------------------------------------------------------<

.DT_FLD_FST_VLDR_VSTR                  ;_R8 = "," or Blank
   ;------> xxxx    Cond    UD L[Rn][Fd]    [offset]
   ORR      R9,R9,#%00001101100000000000101000000000
   BL       Ensure_Comma
   BL       Skip_Blanks
   CMP      R8,#'['
   BNE      DT_FFVV_Label
   LDRB     R8,[R10],#1
   BL       Decode_Rn_Register
   BL       Skip_Blanks
   CMP      R8,#','
   BNE      DT_FFVV_End
   LDRB     R8,[R10],#1
   BL       Ensure_Pound
   BL       Decode_Int_Expr
   CMP      R0,#0
   RSBLT    R0,R0,#0
   BICLT    R9,R9,#Add_Bit
   BICS     R1,R0,#&3FC
   MOVNE    R0,#&A3                    ; Asm_Error #&A3 = Offset must be +/- 1020 (word-aligned)
   BNE      Asm_Error
   ORR      R9,R9,R0,LSR #2
   B        DT_FFVV_End

.DT_FFVV_Label
   BL       Decode_Int_Expr
   CMN      R14,#2
   BEQ      DT_Write_Instruction
   MOV      R4,R0
   LDR      R0,RELATIVE_Register_Read
   ORR      R9,R9,R0,LSL #Rn_Pos
   CMP      R0,#15
   MOVNE    R5,R4
   BNE      DT_FFVV_Not_R15
   LDR      R1,Object_Base
   LDR      R2,Object_Size
   ADD      R1,R1,R2                   ; R1 = PC (not pipelined)
   ADD      R1,R1,#8                   ; R1 = PC (pipelined)
   SUB      R5,R4,R1                   ; R5 = Offset from PC

.DT_FFVV_Not_R15
   CMP      R5,#0
   RSBLT    R5,R5,#0
   BICLT    R9,R9,#Add_Bit
   BICS     R0,R5,#&3FC
   MOVNE    R0,#&A3                    ; Asm_Error #&A3 = Offset must be +/- 1020 (word-aligned)
   BNE      Asm_Error
   ORR      R9,R9,R5,LSR #2
   B        DT_Write_Instruction

.DT_FFVV_End
   BL       Ensure_Close_Bracket
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_FLDM_FSTM_VLDM_VSTM                ;_R8 = "M"
   ;------> xxxx    Cond   PUDWL[Rn][Fd]    [offset]
   ORR      R9,R9,#%00001100000000000000101000000000
   BL       Decode_ConditionCode
   BL       Ensure_Blank
   BL       Decode_Rn_Register
   BL       Skip_Blanks
   CMP      R8,#'!'
   ORREQ    R9,R9,#Write_Back_Bit
   LDREQB   R8,[R10],#1
   BL       Ensure_Comma

.DT_FLDM_FSTM_VLDM_VSTM_Decode_List
   ADR      R0,Decode_VFP_Register
   BL       Decode_Bracketed_Register_List
   CMP      R1,#'Q'
   MOVEQ    R0,#&17                    ; Asm_Error #&17 = Only single and double precision registers allowed
   BEQ      Asm_Error
   MOV      R4,R1
   BL       Analyse_Register_List
   TST      R1,#%10000
   CMPNE    R4,#'S'
   MOVNE    R0,#&18                    ; Asm_Error #&18 = Max 16 double precision registers
   BNE      Asm_Error
   CMP      R4,#'S'
   MOVEQ    R2,R0,LSR #1
   ANDEQ    R3,R0,#1
   ANDNE    R2,R0,#&F
   MOVNE    R3,R0,LSR #4
   ORRNE    R9,R9,#VFP_Size_Bit
   MOVNE    R1,R1,LSL #1
   ORR      R9,R9,R1
   ORR      R9,R9,R2,LSL #Rd_Pos
   ORR      R9,R9,R3,LSL #VFP_D_Pos
   B        DT_Write_Instruction
