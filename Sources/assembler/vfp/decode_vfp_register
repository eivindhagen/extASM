
; >-------------------------------------------------------------<

.Decode_VFP_Scalar                     ;_R0 = Size, _R8 = First char or Blank
   MOV      R1,#'1'                    ;~R0 = Index
   CMP      R0,#VFP_Operand_8
   MOVEQ    R1,#'7'
   CMP      R0,#VFP_Operand_16
   MOVEQ    R1,#'3'
   CMP      R8,#'0'
   RSBGES   R1,R8,R1
   BLT      DVFPS_Error
   SUB      R0,R8,#'0'
   LDRB     R8,[R10],#1
   CMP      R8,#']'
   BNE      DVFPS_Error
   LDRB     R8,[R10],#1
   MOV      R15,R14

.DVFPS_Error
   MOV      R0,#&A0                    ; Asm_Error #&A0 = Illegal scalar specifier
   B        Asm_Error

; >-------------------------------------------------------------<

.Decode_VFP_S_Register
   STMFD    R13!,{R14}
   BL       Decode_VFP_Register
   CMP      R1,#'S'
   BNE      DT_Illegal_Register
   LDMFD    R13!,{R15}

; >-------------------------------------------------------------<

.Decode_VFP_D_Register
   STMFD    R13!,{R14}
   BL       Decode_VFP_Register
   CMP      R1,#'D'
   BNE      DT_Illegal_Register
   LDMFD    R13!,{R15}

; >-------------------------------------------------------------<

.Decode_VFP_Register                   ;_R8 = First char or Blank
   STMFD    R13!,{R4,R14}              ;~R0 = Register number
   BL       Skip_Blanks                ;~R1 = Type, "S", "D" or "Q"
   BIC      R4,R8,#32                  ;~R2 = Vx bits
   CMP      R4,#'Q'                    ;~R3 = D/N/M bit
   MOVEQ    R0,#15                     ;~R8 = Next char
   MOVNE    R0,#31
   CMPNE    R4,#'S'
   CMPNE    R4,#'D'
   MOVNE    R0,#&09                    ; Asm_Error #&09 = Illegal register
   BNE      Asm_Error
   LDRB     R8,[R10],#1
   BL       Decode_VFP_Register_Number
   MOV      R1,R4
   CMP      R1,#'S'
   MOVEQ    R2,R0,LSR #1
   ANDEQ    R3,R0,#1
   CMP      R1,#'D'
   ANDEQ    R2,R0,#&F
   MOVEQ    R3,R0,LSR #4
   CMP      R1,#'Q'
   ANDEQ    R2,R0,#&7
   MOVEQ    R2,R2,LSL #1
   MOVEQ    R3,R0,LSR #3
   LDMFD    R13!,{R4,R15}

; >-------------------------------------------------------------<

.Decode_VFP_Register_Number            ;_R0 = Precision, 31 = Single or double, 15 = Quad, _R8 = First char
   MOV      R2,R0                      ;~R0 = Register number
   LDRB     R1,[R10]                   ;~R8 = Next char
   CMP      R8,#'0'
   RSBGES   R0,R8,#'9'
   MOVLT    R0,#&09                    ; Asm_Error #&09 = Illegal register
   BLT      Asm_Error
   CMP      R1,#'0'
   RSBGES   R0,R1,#'9'
   SUB      R0,R8,#'0'                 ; If two digits, then Reg=(R8-48)*10+R1-48,
   SUBGE    R1,R1,#'0'                 ; else Reg=R8-48
   ADDGE    R0,R0,R0,LSL #2
   ADDGE    R0,R1,R0,LSL #1
   ADDGE    R10,R10,#1
   CMP      R0,R2
   MOVGT    R0,#&09                    ; Asm_Error #&09 = Illegal register
   BGT      Asm_Error
   LDRB     R8,[R10],#1
   CMP      R8,#'0'
   RSBGES   R1,R8,#'9'
   MOVGE    R0,#&09                    ; Asm_Error #&09 = Illegal register
   BGE      Asm_Error
   MOV      R15,R14

; >-------------------------------------------------------------<

.Decode_VFP_System_Register            ;_R8 = First char or blank, ~R0 = Register, ~R8 = Next char
   STMFD    R13!,{R14}
   BL       Skip_Blanks
   BIC      R8,R8,#32
   CMP      R8,#'F'
   BEQ      DVSR_FPEXC_FPINST_FPINST2_FPSCR_FPSID
   CMP      R8,#'M'
   BEQ      DVSR_MVFR0_MVFR1
   B        DT_Bad_System_Register

.DVSR_FPEXC_FPINST_FPINST2_FPSCR_FPSID
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'P'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'E'
   BEQ      DVSR_FPEXC
   CMP      R8,#'I'
   BEQ      DVSR_FPINST_FPINST2
   CMP      R8,#'S'
   BEQ      DVSR_FPSCR_FPSID
   B        DT_Bad_System_Register

.DVSR_FPEXC
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'X'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'C'
   BNE      DT_Bad_System_Register
   MOV      R0,#%1000
   B        DVSR_End

.DVSR_FPINST_FPINST2
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'N'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'S'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'T'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10]
   CMP      R8,#'2'
   MOVEQ    R0,#%1010
   ADDEQ    R10,R10,#1
   MOVNE    R0,#%1001
   B        DVSR_End

.DVSR_FPSCR_FPSID
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'C'
   BEQ      DVSR_FPSCR
   CMP      R8,#'I'
   BEQ      DVSR_FPSID
   B        DT_Bad_System_Register

.DVSR_FPSCR
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'R'
   BNE      DT_Bad_System_Register
   MOV      R0,#%0001
   B        DVSR_End

.DVSR_FPSID
   LDRB     R8,[R10],#1
   BIC      R8,R8,#1
   CMP      R8,#'D'
   BNE      DT_Bad_System_Register
   MOV      R0,#%0000
   B        DVSR_End

.DVSR_MVFR0_MVFR1
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'V'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'F'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'R'
   BNE      DT_Bad_System_Register
   LDRB     R8,[R10],#1
   CMP      R8,#'0'
   MOVEQ    R0,#%0111
   BEQ      DVSR_End
   CMP      R8,#'1'
   BNE      DT_Bad_System_Register
   MOV      R0,#%0110

.DVSR_End
   LDRB     R8,[R10],#1
   LDMFD    R13!,{R15}

.DT_Bad_System_Register
   MOV      R0,#&AA                    ; Asm_Error #&AA = Bad system register
   B        Asm_Error
