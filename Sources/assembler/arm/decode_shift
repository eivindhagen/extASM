
; >-------------------------------------------------------------<

.Decode_Shift                          ;_R8 = "," or Blank, ~R0 = Shift bits, ~R8 = Next char
   STMFD    R13!,{R4,R14}
   BL       Skip_Blanks
   CMP      R8,#','
   MOVNE    R0,#0
   LDMNEFD  R13!,{R4,R15}
   LDRB     R8,[R10],#1                ; NEXT char is relevant
   BL       Skip_Blanks

   BIC      R8,R8,#32
   CMP      R8,#'A'
   BEQ      DS_Arithmetic

   CMP      R8,#'L'
   BEQ      DS_Logic

   CMP      R8,#'R'
   BEQ      DS_Rotate

   B        DS_Error

.DS_Arithmetic
   LDRB     R8,[R10],#1                ; This MUST be "S|s", LSL or ASR
   BIC      R8,R8,#32
   CMP      R8,#'S'
   BNE      DS_Error                   ; Escape if not "S|s"
   ;------> Was "S", now check for "L" or "R", ASL or ASR
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'L'
   MOVEQ    R4,#0
   BEQ      DS_ShiftType               ; ASL = LSL
   CMP      R8,#'R'
   MOVEQ    R4,#2 << 1                 ; ASR
   BEQ      DS_ShiftType
   B        DS_Error                   ; Escape if neither LSL nor ASR

.DS_Logic
   LDRB     R8,[R10],#1                ; This MUST be "S|s", LSL or LSR
   BIC      R8,R8,#32
   CMP      R8,#'S'
   BNE      DS_Error                   ; Escape if not "S|s"
   ;------> Was "S", now check for "L" or "R", LSL or LSR
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'L'
   MOVEQ    R4,#0                      ; LSL
   BEQ      DS_ShiftType
   CMP      R8,#'R'
   MOVEQ    R4,#1 << 1                 ; LSR
   BEQ      DS_ShiftType
   B        DS_Error                   ; Escape if neither LSL nor LSR

.DS_Rotate
   LDRB     R8,[R10],#1                ; Should be "O" or "R", ROR or RRX
   BIC      R8,R8,#32
   CMP      R8,#'R'
   BEQ      DS_RRX
   CMP      R8,#'O'
   BNE      DS_Error
   ;------> Was "O", now check for "R", ROR
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'R'
   MOVEQ    R4,#3 << 1                 ; ROR
   BEQ      DS_ShiftType
   B        DS_Error                   ; Escape if not ROR

.DS_RRX
   LDRB     R8,[R10],#1                ; Should be "X", RRX
   BIC      R8,R8,#32
   CMP      R8,#'X'
   BNE      DS_Error
   MOV      R0,#3 << 1                 ; ROR 0 -> RRX
   LDRB     R8,[R10],#1
   LDR      R1,Options
   TST      R1,#Option_CodeStat
   LDMEQFD  R13!,{R4,R15}              ; All is okay, end this mess right here!
   B        DS_Stat

.DS_ShiftType                          ;_R8 = "L" or "R" from shift types
   ;------> Decode constant shift vs. register shift
   LDRB     R8,[R10],#1                ; R8 = "#", register or Blank
   BL       Skip_Blanks
   CMP      R8,#'#'
   BEQ      DSST_Constant              ; If not a constant, must be a register

   ORR      R4,R4,#1                   ; Rightmost bit = 1 for register shift
   BL       Decode_Register            ; R0 = Shift register
   MOV      R1,R0
   CMP      R0,#&F
   MOVEQ    R0,#&30                    ; Asm_Warning #&30 = R15 should not be used as shift register
   BLEQ     Asm_Warning
   ORR      R0,R4,R1,LSL #4            ; Insert shift register
   LDR      R1,Options
   TST      R1,#Option_CodeStat
   LDMEQFD  R13!,{R4,R15}
   B        DS_Stat

.DSST_Constant                         ;_R8 = "#"
   LDRB     R8,[R10],#1
   BL       Decode_Int_Expr            ; Rightmost bit = 0 for constant shift

   CMP      R0,#0
   RSBGES   R1,R0,#32                  ; Shifts must be between 0 and 32
   BLT      DS_Error
   CMPEQ    R4,#0                      ; LSL #32?
   BEQ      DS_Error
   CMP      R0,#32
   CMPEQ    R4,#3 << 1                 ; ROR #32?
   BEQ      DS_Error

   MOV      R3,R4
   CMP      R0,#0
   BICEQ    R3,R3,#3 << 1              ; All 0 shifts = LSL #0
   AND      R0,R0,#&1F
   ORR      R0,R3,R0,LSL #3            ; Insert shift amount
   LDR      R1,Options
   TST      R1,#Option_CodeStat
   LDMEQFD  R13!,{R4,R15}

.DS_Stat
   ADR      R1,Shift_Counters
   CMP      R0,#3 << 1
   MOVEQ    R4,#8
   LDR      R3,[R1,R4,LSL #2]
   ADD      R3,R3,#1
   STR      R3,[R1,R4,LSL #2]
   LDMFD    R13!,{R4,R15}

.DS_Error
   MOV      R0,#&01                    ; Asm_Error #&01 = Illegal shift
   B        Asm_Error
