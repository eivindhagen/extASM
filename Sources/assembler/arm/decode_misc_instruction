
; >-------------------------------------------------------------<

.DT_CLREX                              ;_R8 = "R"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'E'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'X'
   BNE      DT_Unknown
   ;------> CLREX
   MOV      R9,#%11110101011111111111000000011111
   LDRB     R8,[R10],#1
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_DBG                                ;_R8 = "G"
   ;------> DBG  Cond                        Opt
   MOV      R9,#%00000011001000001111000011110000
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   BL       Ensure_Blank
   BL       Decode_Immediate
   CMP      R0,#&F
   MOVHI    R0,#&0A                    ; Asm_Error #&0A = Too big constant
   BHI      Asm_Error
   ORR      R9,R9,R0
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_DMB                                ;_R8 = "M"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'B'
   BNE      DT_Unknown
   ;------> DMB                              Opt
   MOV      R9,#%11110101011111111111000001010000
   LDRB     R8,[R10],#1
   BL       Decode_Memory_Barrier_Option
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_DSB                                ;_R8 = "S"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'B'
   BNE      DT_Unknown
   ;------> DSB                              Opt
   MOV      R9,#%11110101011111111111000001000000
   LDRB     R8,[R10],#1
   BL       Decode_Memory_Barrier_Option
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_ISB                                ;_R8 = "S"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'B'
   BNE      DT_Unknown
   ;------> ISB                              Opt
   MOV      R9,#%11110101011111111111000001100000
   LDRB     R8,[R10],#1
   BL       Decode_Memory_Barrier_Option
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_NOP                                ;_R8 = "O"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'P'
   BNE      DT_Unknown
   ;------> NOP  Cond
;@@@JJA 14/10/12
   MOV      R9, #&01A00000
;@@@JJA
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_PLD_PLI                            ;_R8 = "L"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'D'
   BEQ      DT_PLD
   CMP      R8,#'I'
   BEQ      DT_PLI
   B        DT_Unknown

; >-------------------------------------------------------------<

.DT_PLD                                ;_R8 = "D"
   ; PLD[W] [Rn, #<immediate>]
   ; PLD[W] [Rn, [+|-]Rm[, <shift>]]
   ;
   ;------> PLD[W]     I UR  [Rn]    [  Offset  ]
   MOV      R9,#%11110101000100001111000000000000
   LDRB     R8,[R10],#1
   CMP      R8,#'W'
   CMPNE    R8,#'w'
   ORRNE    R9,R9,#1 << 22
   LDREQB   R8,[R10],#1
   B        DT_PLx

; >-------------------------------------------------------------<

.DT_PLI                                ;_R8 = "I"
   ; PLI [Rn, #<immediate>]
   ; PLI [Rn, [+|-]Rm[, <shift>]]
   ;
   ;------> PLI        I U   [Rn]    [  Offset  ]
   MOV      R9,#%11110100010100001111000000000000
   LDRB     R8,[R10],#1
   B        DT_PLx

; >-------------------------------------------------------------<

.DT_PLx
   BL       Ensure_Blank
   BL       Ensure_Open_Bracket
   BL       Decode_Rn_Register
   BL       Ensure_Comma
   BL       Skip_Blanks
   CMP      R8,#'#'
   BEQ      DT_PLD_Imm
   ORR      R9,R9,#1 << 25
   CMP      R8,#'-'
   ORRNE    R9,R9,#Add_Bit
   CMPNE    R8,#'+'
   LDREQB   R8,[R10],#1
   BL       Decode_Rm_Register
   BL       Skip_Blanks
   CMP      R8,#','
   BNE      DT_PLD_No_Shift
   BL       Decode_Shift
   ORR      R9,R9,R0,LSL #4

.DT_PLD_No_Shift
   BL       Ensure_Close_Bracket
   B        DT_Write_Instruction

.DT_PLD_Imm
   LDRB     R8,[R10],#1
   BL       Decode_Int_Expr
   CMP      R0,#0
   RSBLT    R0,R0,#0
   ORRGE    R9,R9,#Add_Bit
   CMP      R0,#&FFF
   MOVGT    R0,#&14                    ; Asm_Error #&14 = Offset must be +/- 4095
   BGT      Asm_Error
   ORR      R9,R9,R0
   BL       Ensure_Close_Bracket
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_SETEND                             ;_R8 = "T"
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'E'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'N'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'D'
   BNE      DT_Unknown
   ;------> SETEND                       E
   MOV      R9,#  %11110001000000010000000000000000
   LDRB     R8,[R10],#1
   BL       Ensure_Blank
   BL       Skip_Blanks
   BIC      R8,R8,#32
   CMP      R8,#'B'
   ORREQ    R9,R9,#1 << 9
   CMPNE    R8,#'L'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'E'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_SEV                                ;_R8 = "V"
   ;------> SEV  Cond
   MOV      R9,#%00000011001000001111000000000100
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_SWP                                ;_R8 = "P"
   LDR      R0,Options
   TST      R0,#Option_CodeStat
   LDRNE    R0,Code_Counters+25*4
   ADDNE    R0,R0,#1
   STRNE    R0,Code_Counters+25*4
   ;------> SWP  Cond     B  [Rn][Rd]        [Rm]
   MOV      R9,#%00000001000000000000000010010000
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode

   CMP      R8,#'B'
   CMPNE    R8,#'b'
   ORREQ    R9,R9,#1 << 22
   LDREQB   R8,[R10],#1
   BL       Decode_Destination_Register
   CMP      R0,#&F
   MOVEQ    R0,#&37                    ; Asm_Warning #&37 = R15 should not be used as an operand (Rd, Rn or Rs) for SWP
   BLEQ     Asm_Warning

   BL       Decode_Operand_Rm_Register
   CMP      R0,#&F
   MOVEQ    R0,#&37                    ; Asm_Warning #&37 = R15 should not be used as an operand (Rd, Rn or Rs) for SWP
   BLEQ     Asm_Warning

   BL       Ensure_Comma
   BL       Ensure_Open_Bracket
   BL       Decode_Rn_Register
   CMP      R0,#&F
   MOVEQ    R0,#&37                    ; Asm_Warning #&37 = R15 should not be used as an operand (Rd, Rn or Rs) for SWP
   BLEQ     Asm_Warning

   BL       Skip_Blanks
   CMP      R8,#']'
   MOVNE    R0,#&12                    ; Asm_Error #&12 = Missing "]"
   BNE      Asm_Error
   LDRB     R8,[R10],#1

   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_WFE                                ;_R8 = "E"
   ;------> WFE  Cond
   MOV      R9,#%00000011001000001111000000000010
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_WFI                                ;_R8 = "I"
   ;------> WFI  Cond
   MOV      R9,#%00000011001000001111000000000011
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.DT_YIELD                              ;_R8 = "D"
   ;------> YIELD
   MOV      R9,#%00000011001000001111000000000001
   LDRB     R8,[R10],#1
   BL       Decode_ConditionCode
   B        DT_Write_Instruction

; >-------------------------------------------------------------<

.Decode_Memory_Barrier_Option          ;_R8 = "#" or Blank, ~R8 = Next char
   STMFD    R13!,{R14}
   BL       Skip_Blanks
   BIC      R8,R8,#32
   CMP      R8,#'I'
   MOVEQ    R0,#%1011
   BEQ      DMBO_xSH_xSHST
   CMP      R8,#'N'
   MOVEQ    R0,#%0111
   BEQ      DMBO_xSH_xSHST
   CMP      R8,#'O'
   MOVEQ    R0,#%0011
   BEQ      DMBO_xSH_xSHST
   CMP      R8,#'S'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'T'
   MOVEQ    R0,#%1110
   LDREQB   R8,[R10],#1
   BEQ      DMBO_End
   CMP      R8,#'Y'
   MOVEQ    R0,#%1111
   LDREQB   R8,[R10],#1
   BEQ      DMBO_End
   B        DT_Unknown

.DMBO_xSH_xSHST
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'S'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'H'
   BNE      DT_Unknown
   LDRB     R8,[R10],#1
   CMP      R8,#'S'
   CMPNE    R8,#'s'
   BNE      DMBO_End
   LDRB     R8,[R10],#1
   BIC      R8,R8,#32
   CMP      R8,#'T'
   BNE      DT_Unknown
   BIC      R0,R0,#1
   LDRB     R8,[R10],#1

.DMBO_End
   ORR      R9,R9,R0
   LDMFD    R13!,{R15}
